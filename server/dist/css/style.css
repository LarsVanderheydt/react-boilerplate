html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  /* stylelint-disable-line */
  vertical-align: baseline; }

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section, main {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote::before, blockquote::after,
q::before, q::after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

html {
  box-sizing: border-box;
  font-size: 62.5%; }

*, *::before, *::after {
  /* stylelint-disable-line */
  box-sizing: inherit; }

.fa,
.icon {
  display: inline-block;
  font: normal normal normal 14px/1 'icomoon';
  font-size: inherit;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  margin-right: 4px; }

/**
 * Adds a font icon to an element.
 * @param  {string} $icon: 'angle-right'
 *                         List to be found in config/icons
 *                         We default to a simple "next" style angle.
 * @param  {[string]} $pos:  'before'
 *                         Positions icon before (default) or after the selector.
 */
h1 {
  font-size: 2rem; }

a {
  text-decoration: none;
  display: inline-block;
  font-size: 1.6rem; }

.container {
  max-width: 1290px;
  margin: 0 auto; }

#app {
  display: grid;
  grid-template-columns: repeat(1fr, 3);
  min-height: 100vh; }

.region-content {
  justify-self: center; }

.region-header .container {
  display: flex;
  justify-content: space-between;
  align-items: center; }

.region-footer {
  background-color: #303030; }
  .region-footer a {
    color: white;
    padding: 1rem 1.5rem;
    display: inline-block; }

.main_menu {
  display: flex; }
  .main_menu .menu__item {
    padding: 1rem 1.5rem;
    background-color: #303030;
    transition: all .5s ease;
    color: #ef0e3b; }
    .main_menu .menu__item:hover {
      background-color: #ef0e3b;
      color: #303030;
      transition: all .5s ease; }

.current_page {
  text-decoration: underline; }


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/